// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_pagination is a generated GoMock package.
package mock_pagination

import (
	squirrel "github.com/Masterminds/squirrel"
	pagination "github.com/abmid/icanvas-analytics/internal/pagination"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaginationInterface is a mock of PaginationInterface interface
type MockPaginationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPaginationInterfaceMockRecorder
}

// MockPaginationInterfaceMockRecorder is the mock recorder for MockPaginationInterface
type MockPaginationInterfaceMockRecorder struct {
	mock *MockPaginationInterface
}

// NewMockPaginationInterface creates a new mock instance
func NewMockPaginationInterface(ctrl *gomock.Controller) *MockPaginationInterface {
	mock := &MockPaginationInterface{ctrl: ctrl}
	mock.recorder = &MockPaginationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaginationInterface) EXPECT() *MockPaginationInterfaceMockRecorder {
	return m.recorder
}

// BuildPagination mocks base method
func (m *MockPaginationInterface) BuildPagination(query squirrel.SelectBuilder, limit, page uint64) (pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPagination", query, limit, page)
	ret0, _ := ret[0].(pagination.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildPagination indicates an expected call of BuildPagination
func (mr *MockPaginationInterfaceMockRecorder) BuildPagination(query, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPagination", reflect.TypeOf((*MockPaginationInterface)(nil).BuildPagination), query, limit, page)
}
