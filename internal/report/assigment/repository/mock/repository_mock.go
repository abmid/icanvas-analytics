// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/abmid/icanvas-analytics/internal/report/entity"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAssigmentRepositoryPG is a mock of AssigmentRepositoryPG interface
type MockAssigmentRepositoryPG struct {
	ctrl     *gomock.Controller
	recorder *MockAssigmentRepositoryPGMockRecorder
}

// MockAssigmentRepositoryPGMockRecorder is the mock recorder for MockAssigmentRepositoryPG
type MockAssigmentRepositoryPGMockRecorder struct {
	mock *MockAssigmentRepositoryPG
}

// NewMockAssigmentRepositoryPG creates a new mock instance
func NewMockAssigmentRepositoryPG(ctrl *gomock.Controller) *MockAssigmentRepositoryPG {
	mock := &MockAssigmentRepositoryPG{ctrl: ctrl}
	mock.recorder = &MockAssigmentRepositoryPGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssigmentRepositoryPG) EXPECT() *MockAssigmentRepositoryPGMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAssigmentRepositoryPG) Create(ctx context.Context, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAssigmentRepositoryPGMockRecorder) Create(ctx, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).Create), ctx, assigment)
}

// Read mocks base method
func (m *MockAssigmentRepositoryPG) Read(ctx context.Context) ([]entity.ReportAssigment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.ReportAssigment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockAssigmentRepositoryPGMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).Read), ctx)
}

// Update mocks base method
func (m *MockAssigmentRepositoryPG) Update(ctx context.Context, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAssigmentRepositoryPGMockRecorder) Update(ctx, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).Update), ctx, assigment)
}

// Delete mocks base method
func (m *MockAssigmentRepositoryPG) Delete(ctx context.Context, reportAssigmentID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reportAssigmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAssigmentRepositoryPGMockRecorder) Delete(ctx, reportAssigmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).Delete), ctx, reportAssigmentID)
}

// CreateOrUpdateByCourseReportID mocks base method
func (m *MockAssigmentRepositoryPG) CreateOrUpdateByCourseReportID(ctx context.Context, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateByCourseReportID", ctx, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateByCourseReportID indicates an expected call of CreateOrUpdateByCourseReportID
func (mr *MockAssigmentRepositoryPGMockRecorder) CreateOrUpdateByCourseReportID(ctx, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateByCourseReportID", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).CreateOrUpdateByCourseReportID), ctx, assigment)
}

// FindFilter mocks base method
func (m *MockAssigmentRepositoryPG) FindFilter(ctx context.Context, filter entity.ReportAssigment) ([]entity.ReportAssigment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.ReportAssigment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilter indicates an expected call of FindFilter
func (mr *MockAssigmentRepositoryPGMockRecorder) FindFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilter", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).FindFilter), ctx, filter)
}

// FindFirstByFilter mocks base method
func (m *MockAssigmentRepositoryPG) FindFirstByFilter(ctx context.Context, filter entity.ReportAssigment) (entity.ReportAssigment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByFilter", ctx, filter)
	ret0, _ := ret[0].(entity.ReportAssigment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByFilter indicates an expected call of FindFirstByFilter
func (mr *MockAssigmentRepositoryPGMockRecorder) FindFirstByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByFilter", reflect.TypeOf((*MockAssigmentRepositoryPG)(nil).FindFirstByFilter), ctx, filter)
}
