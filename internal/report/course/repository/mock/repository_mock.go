// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/abmid/icanvas-analytics/internal/report/entity"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCourseRepositoryPG is a mock of CourseRepositoryPG interface
type MockCourseRepositoryPG struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryPGMockRecorder
}

// MockCourseRepositoryPGMockRecorder is the mock recorder for MockCourseRepositoryPG
type MockCourseRepositoryPGMockRecorder struct {
	mock *MockCourseRepositoryPG
}

// NewMockCourseRepositoryPG creates a new mock instance
func NewMockCourseRepositoryPG(ctrl *gomock.Controller) *MockCourseRepositoryPG {
	mock := &MockCourseRepositoryPG{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryPGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourseRepositoryPG) EXPECT() *MockCourseRepositoryPGMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCourseRepositoryPG) Create(ctx context.Context, reportCourse *entity.ReportCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reportCourse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCourseRepositoryPGMockRecorder) Create(ctx, reportCourse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseRepositoryPG)(nil).Create), ctx, reportCourse)
}

// Read mocks base method
func (m *MockCourseRepositoryPG) Read(ctx context.Context) ([]entity.ReportCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.ReportCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockCourseRepositoryPGMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCourseRepositoryPG)(nil).Read), ctx)
}

// FindFilter mocks base method
func (m *MockCourseRepositoryPG) FindFilter(ctx context.Context, filter entity.ReportCourse) ([]entity.ReportCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.ReportCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilter indicates an expected call of FindFilter
func (mr *MockCourseRepositoryPGMockRecorder) FindFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilter", reflect.TypeOf((*MockCourseRepositoryPG)(nil).FindFilter), ctx, filter)
}

// Update mocks base method
func (m *MockCourseRepositoryPG) Update(ctx context.Context, reportCourse *entity.ReportCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reportCourse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCourseRepositoryPGMockRecorder) Update(ctx, reportCourse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseRepositoryPG)(nil).Update), ctx, reportCourse)
}

// Delete mocks base method
func (m *MockCourseRepositoryPG) Delete(ctx context.Context, reportCourseID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reportCourseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCourseRepositoryPGMockRecorder) Delete(ctx, reportCourseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseRepositoryPG)(nil).Delete), ctx, reportCourseID)
}

// FindByID mocks base method
func (m *MockCourseRepositoryPG) FindByID(ctx context.Context, id uint32) (entity.ReportCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(entity.ReportCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockCourseRepositoryPGMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCourseRepositoryPG)(nil).FindByID), ctx, id)
}

// FindByCourseIDDateNow mocks base method
func (m *MockCourseRepositoryPG) FindByCourseIDDateNow(ctx context.Context, courseID uint32) (entity.ReportCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCourseIDDateNow", ctx, courseID)
	ret0, _ := ret[0].(entity.ReportCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCourseIDDateNow indicates an expected call of FindByCourseIDDateNow
func (mr *MockCourseRepositoryPGMockRecorder) FindByCourseIDDateNow(ctx, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCourseIDDateNow", reflect.TypeOf((*MockCourseRepositoryPG)(nil).FindByCourseIDDateNow), ctx, courseID)
}
