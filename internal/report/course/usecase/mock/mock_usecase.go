// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "github.com/abmid/icanvas-analytics/internal/report/entity"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReportCourseUseCase is a mock of ReportCourseUseCase interface
type MockReportCourseUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockReportCourseUseCaseMockRecorder
}

// MockReportCourseUseCaseMockRecorder is the mock recorder for MockReportCourseUseCase
type MockReportCourseUseCaseMockRecorder struct {
	mock *MockReportCourseUseCase
}

// NewMockReportCourseUseCase creates a new mock instance
func NewMockReportCourseUseCase(ctrl *gomock.Controller) *MockReportCourseUseCase {
	mock := &MockReportCourseUseCase{ctrl: ctrl}
	mock.recorder = &MockReportCourseUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportCourseUseCase) EXPECT() *MockReportCourseUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReportCourseUseCase) Create(ctx context.Context, reportCourse *entity.ReportCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reportCourse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportCourseUseCaseMockRecorder) Create(ctx, reportCourse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportCourseUseCase)(nil).Create), ctx, reportCourse)
}

// Read mocks base method
func (m *MockReportCourseUseCase) Read(ctx context.Context) ([]entity.ReportCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.ReportCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReportCourseUseCaseMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReportCourseUseCase)(nil).Read), ctx)
}

// FindFilter mocks base method
func (m *MockReportCourseUseCase) FindFilter(ctx context.Context, filter entity.ReportCourse) ([]entity.ReportCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.ReportCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilter indicates an expected call of FindFilter
func (mr *MockReportCourseUseCaseMockRecorder) FindFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilter", reflect.TypeOf((*MockReportCourseUseCase)(nil).FindFilter), ctx, filter)
}

// Update mocks base method
func (m *MockReportCourseUseCase) Update(ctx context.Context, reportCourse *entity.ReportCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reportCourse)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReportCourseUseCaseMockRecorder) Update(ctx, reportCourse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportCourseUseCase)(nil).Update), ctx, reportCourse)
}

// Delete mocks base method
func (m *MockReportCourseUseCase) Delete(ctx context.Context, reportCourseID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reportCourseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockReportCourseUseCaseMockRecorder) Delete(ctx, reportCourseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReportCourseUseCase)(nil).Delete), ctx, reportCourseID)
}

// CreateOrUpdateCourseID mocks base method
func (m *MockReportCourseUseCase) CreateOrUpdateCourseID(ctx context.Context, reportCourse *entity.ReportCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateCourseID", ctx, reportCourse)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateCourseID indicates an expected call of CreateOrUpdateCourseID
func (mr *MockReportCourseUseCaseMockRecorder) CreateOrUpdateCourseID(ctx, reportCourse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCourseID", reflect.TypeOf((*MockReportCourseUseCase)(nil).CreateOrUpdateCourseID), ctx, reportCourse)
}
