// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	pagination "github.com/abmid/icanvas-analytics/internal/pagination"
	entity "github.com/abmid/icanvas-analytics/pkg/analytics/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAnalyticsRepository is a mock of AnalyticsRepository interface
type MockAnalyticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsRepositoryMockRecorder
}

// MockAnalyticsRepositoryMockRecorder is the mock recorder for MockAnalyticsRepository
type MockAnalyticsRepositoryMockRecorder struct {
	mock *MockAnalyticsRepository
}

// NewMockAnalyticsRepository creates a new mock instance
func NewMockAnalyticsRepository(ctrl *gomock.Controller) *MockAnalyticsRepository {
	mock := &MockAnalyticsRepository{ctrl: ctrl}
	mock.recorder = &MockAnalyticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnalyticsRepository) EXPECT() *MockAnalyticsRepositoryMockRecorder {
	return m.recorder
}

// FindBestCourseByFilter mocks base method
func (m *MockAnalyticsRepository) FindBestCourseByFilter(ctx context.Context, filter entity.FilterAnalytics) ([]entity.AnalyticsCourse, pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBestCourseByFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.AnalyticsCourse)
	ret1, _ := ret[1].(pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindBestCourseByFilter indicates an expected call of FindBestCourseByFilter
func (mr *MockAnalyticsRepositoryMockRecorder) FindBestCourseByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBestCourseByFilter", reflect.TypeOf((*MockAnalyticsRepository)(nil).FindBestCourseByFilter), ctx, filter)
}
