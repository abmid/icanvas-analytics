// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "github.com/abmid/icanvas-analytics/pkg/canvas/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockCourseUseCase is a mock of CourseUseCase interface
type MockCourseUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCourseUseCaseMockRecorder
}

// MockCourseUseCaseMockRecorder is the mock recorder for MockCourseUseCase
type MockCourseUseCaseMockRecorder struct {
	mock *MockCourseUseCase
}

// NewMockCourseUseCase creates a new mock instance
func NewMockCourseUseCase(ctrl *gomock.Controller) *MockCourseUseCase {
	mock := &MockCourseUseCase{ctrl: ctrl}
	mock.recorder = &MockCourseUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourseUseCase) EXPECT() *MockCourseUseCaseMockRecorder {
	return m.recorder
}

// Courses mocks base method
func (m *MockCourseUseCase) Courses(accountId, page uint32) ([]entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Courses", accountId, page)
	ret0, _ := ret[0].([]entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Courses indicates an expected call of Courses
func (mr *MockCourseUseCaseMockRecorder) Courses(accountId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Courses", reflect.TypeOf((*MockCourseUseCase)(nil).Courses), accountId, page)
}

// ListUserInCourse mocks base method
func (m *MockCourseUseCase) ListUserInCourse(courseID uint32, enrollmentRole string) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserInCourse", courseID, enrollmentRole)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserInCourse indicates an expected call of ListUserInCourse
func (mr *MockCourseUseCaseMockRecorder) ListUserInCourse(courseID, enrollmentRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserInCourse", reflect.TypeOf((*MockCourseUseCase)(nil).ListUserInCourse), courseID, enrollmentRole)
}

// AllCourse mocks base method
func (m *MockCourseUseCase) AllCourse(accountId, pool uint32) ([]entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCourse", accountId, pool)
	ret0, _ := ret[0].([]entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCourse indicates an expected call of AllCourse
func (mr *MockCourseUseCaseMockRecorder) AllCourse(accountId, pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCourse", reflect.TypeOf((*MockCourseUseCase)(nil).AllCourse), accountId, pool)
}

// GoAllCourse mocks base method
func (m *MockCourseUseCase) GoAllCourse(accountID uint32, ch chan<- []entity.Course, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GoAllCourse", accountID, ch, wg)
}

// GoAllCourse indicates an expected call of GoAllCourse
func (mr *MockCourseUseCaseMockRecorder) GoAllCourse(accountID, ch, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoAllCourse", reflect.TypeOf((*MockCourseUseCase)(nil).GoAllCourse), accountID, ch, wg)
}
