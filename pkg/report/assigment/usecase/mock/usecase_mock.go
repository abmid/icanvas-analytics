// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	entity "github.com/abmid/icanvas-analytics/pkg/report/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReportAssigmentUseCase is a mock of ReportAssigmentUseCase interface
type MockReportAssigmentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockReportAssigmentUseCaseMockRecorder
}

// MockReportAssigmentUseCaseMockRecorder is the mock recorder for MockReportAssigmentUseCase
type MockReportAssigmentUseCaseMockRecorder struct {
	mock *MockReportAssigmentUseCase
}

// NewMockReportAssigmentUseCase creates a new mock instance
func NewMockReportAssigmentUseCase(ctrl *gomock.Controller) *MockReportAssigmentUseCase {
	mock := &MockReportAssigmentUseCase{ctrl: ctrl}
	mock.recorder = &MockReportAssigmentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportAssigmentUseCase) EXPECT() *MockReportAssigmentUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReportAssigmentUseCase) Create(ctx context.Context, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportAssigmentUseCaseMockRecorder) Create(ctx, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).Create), ctx, assigment)
}

// Read mocks base method
func (m *MockReportAssigmentUseCase) Read(ctx context.Context) ([]entity.ReportAssigment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.ReportAssigment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReportAssigmentUseCaseMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).Read), ctx)
}

// Update mocks base method
func (m *MockReportAssigmentUseCase) Update(ctx context.Context, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReportAssigmentUseCaseMockRecorder) Update(ctx, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).Update), ctx, assigment)
}

// Delete mocks base method
func (m *MockReportAssigmentUseCase) Delete(ctx context.Context, reportAssigmentID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reportAssigmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockReportAssigmentUseCaseMockRecorder) Delete(ctx, reportAssigmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).Delete), ctx, reportAssigmentID)
}

// CreateOrUpdateByCourseReportID mocks base method
func (m *MockReportAssigmentUseCase) CreateOrUpdateByCourseReportID(ctx context.Context, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateByCourseReportID", ctx, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateByCourseReportID indicates an expected call of CreateOrUpdateByCourseReportID
func (mr *MockReportAssigmentUseCaseMockRecorder) CreateOrUpdateByCourseReportID(ctx, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateByCourseReportID", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).CreateOrUpdateByCourseReportID), ctx, assigment)
}

// CreateOrUpdateByFilter mocks base method
func (m *MockReportAssigmentUseCase) CreateOrUpdateByFilter(ctx context.Context, filter entity.ReportAssigment, assigment *entity.ReportAssigment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateByFilter", ctx, filter, assigment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateByFilter indicates an expected call of CreateOrUpdateByFilter
func (mr *MockReportAssigmentUseCaseMockRecorder) CreateOrUpdateByFilter(ctx, filter, assigment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateByFilter", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).CreateOrUpdateByFilter), ctx, filter, assigment)
}

// FindFilter mocks base method
func (m *MockReportAssigmentUseCase) FindFilter(ctx context.Context, filter entity.ReportAssigment) ([]entity.ReportAssigment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.ReportAssigment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilter indicates an expected call of FindFilter
func (mr *MockReportAssigmentUseCaseMockRecorder) FindFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilter", reflect.TypeOf((*MockReportAssigmentUseCase)(nil).FindFilter), ctx, filter)
}
