// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "github.com/abmid/icanvas-analytics/pkg/report/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDisscussionRepositoryPG is a mock of DisscussionRepositoryPG interface
type MockDisscussionRepositoryPG struct {
	ctrl     *gomock.Controller
	recorder *MockDisscussionRepositoryPGMockRecorder
}

// MockDisscussionRepositoryPGMockRecorder is the mock recorder for MockDisscussionRepositoryPG
type MockDisscussionRepositoryPGMockRecorder struct {
	mock *MockDisscussionRepositoryPG
}

// NewMockDisscussionRepositoryPG creates a new mock instance
func NewMockDisscussionRepositoryPG(ctrl *gomock.Controller) *MockDisscussionRepositoryPG {
	mock := &MockDisscussionRepositoryPG{ctrl: ctrl}
	mock.recorder = &MockDisscussionRepositoryPGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisscussionRepositoryPG) EXPECT() *MockDisscussionRepositoryPGMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDisscussionRepositoryPG) Create(ctx context.Context, reportDiss *entity.ReportDiscussion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reportDiss)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDisscussionRepositoryPGMockRecorder) Create(ctx, reportDiss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDisscussionRepositoryPG)(nil).Create), ctx, reportDiss)
}

// Read mocks base method
func (m *MockDisscussionRepositoryPG) Read(ctx context.Context) ([]entity.ReportDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.ReportDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockDisscussionRepositoryPGMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDisscussionRepositoryPG)(nil).Read), ctx)
}

// Update mocks base method
func (m *MockDisscussionRepositoryPG) Update(ctx context.Context, reportDiss *entity.ReportDiscussion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reportDiss)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDisscussionRepositoryPGMockRecorder) Update(ctx, reportDiss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDisscussionRepositoryPG)(nil).Update), ctx, reportDiss)
}

// Delete mocks base method
func (m *MockDisscussionRepositoryPG) Delete(ctx context.Context, reportDissID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reportDissID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDisscussionRepositoryPGMockRecorder) Delete(ctx, reportDissID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDisscussionRepositoryPG)(nil).Delete), ctx, reportDissID)
}

// FindFilter mocks base method
func (m *MockDisscussionRepositoryPG) FindFilter(ctx context.Context, filter entity.ReportDiscussion) ([]entity.ReportDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.ReportDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilter indicates an expected call of FindFilter
func (mr *MockDisscussionRepositoryPGMockRecorder) FindFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilter", reflect.TypeOf((*MockDisscussionRepositoryPG)(nil).FindFilter), ctx, filter)
}

// FindFirstByFilter mocks base method
func (m *MockDisscussionRepositoryPG) FindFirstByFilter(ctx context.Context, filter entity.ReportDiscussion) (entity.ReportDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByFilter", ctx, filter)
	ret0, _ := ret[0].(entity.ReportDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByFilter indicates an expected call of FindFirstByFilter
func (mr *MockDisscussionRepositoryPGMockRecorder) FindFirstByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByFilter", reflect.TypeOf((*MockDisscussionRepositoryPG)(nil).FindFirstByFilter), ctx, filter)
}
