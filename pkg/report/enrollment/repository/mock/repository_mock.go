// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "github.com/abmid/icanvas-analytics/pkg/report/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEnrollmentRepositoryPG is a mock of EnrollmentRepositoryPG interface
type MockEnrollmentRepositoryPG struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRepositoryPGMockRecorder
}

// MockEnrollmentRepositoryPGMockRecorder is the mock recorder for MockEnrollmentRepositoryPG
type MockEnrollmentRepositoryPGMockRecorder struct {
	mock *MockEnrollmentRepositoryPG
}

// NewMockEnrollmentRepositoryPG creates a new mock instance
func NewMockEnrollmentRepositoryPG(ctrl *gomock.Controller) *MockEnrollmentRepositoryPG {
	mock := &MockEnrollmentRepositoryPG{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRepositoryPGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnrollmentRepositoryPG) EXPECT() *MockEnrollmentRepositoryPGMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEnrollmentRepositoryPG) Create(ctx context.Context, reportEnroll *entity.ReportEnrollment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reportEnroll)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEnrollmentRepositoryPGMockRecorder) Create(ctx, reportEnroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnrollmentRepositoryPG)(nil).Create), ctx, reportEnroll)
}

// Read mocks base method
func (m *MockEnrollmentRepositoryPG) Read(ctx context.Context) ([]entity.ReportEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.ReportEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockEnrollmentRepositoryPGMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEnrollmentRepositoryPG)(nil).Read), ctx)
}

// Update mocks base method
func (m *MockEnrollmentRepositoryPG) Update(ctx context.Context, reportEnroll *entity.ReportEnrollment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reportEnroll)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEnrollmentRepositoryPGMockRecorder) Update(ctx, reportEnroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnrollmentRepositoryPG)(nil).Update), ctx, reportEnroll)
}

// Delete mocks base method
func (m *MockEnrollmentRepositoryPG) Delete(ctx context.Context, reportEnrollID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reportEnrollID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEnrollmentRepositoryPGMockRecorder) Delete(ctx, reportEnrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEnrollmentRepositoryPG)(nil).Delete), ctx, reportEnrollID)
}

// FindFilter mocks base method
func (m *MockEnrollmentRepositoryPG) FindFilter(ctx context.Context, filter entity.ReportEnrollment) ([]entity.ReportEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilter", ctx, filter)
	ret0, _ := ret[0].([]entity.ReportEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilter indicates an expected call of FindFilter
func (mr *MockEnrollmentRepositoryPGMockRecorder) FindFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilter", reflect.TypeOf((*MockEnrollmentRepositoryPG)(nil).FindFilter), ctx, filter)
}

// FindFirstByFilter mocks base method
func (m *MockEnrollmentRepositoryPG) FindFirstByFilter(ctx context.Context, filter entity.ReportEnrollment) (entity.ReportEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByFilter", ctx, filter)
	ret0, _ := ret[0].(entity.ReportEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByFilter indicates an expected call of FindFirstByFilter
func (mr *MockEnrollmentRepositoryPGMockRecorder) FindFirstByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByFilter", reflect.TypeOf((*MockEnrollmentRepositoryPG)(nil).FindFirstByFilter), ctx, filter)
}
