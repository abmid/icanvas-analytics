// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "github.com/abmid/icanvas-analytics/pkg/report/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReportResultRepository is a mock of ReportResultRepository interface
type MockReportResultRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReportResultRepositoryMockRecorder
}

// MockReportResultRepositoryMockRecorder is the mock recorder for MockReportResultRepository
type MockReportResultRepositoryMockRecorder struct {
	mock *MockReportResultRepository
}

// NewMockReportResultRepository creates a new mock instance
func NewMockReportResultRepository(ctrl *gomock.Controller) *MockReportResultRepository {
	mock := &MockReportResultRepository{ctrl: ctrl}
	mock.recorder = &MockReportResultRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportResultRepository) EXPECT() *MockReportResultRepositoryMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockReportResultRepository) Update(ctx context.Context, reportUser *entity.ReportUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reportUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReportResultRepositoryMockRecorder) Update(ctx, reportUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportResultRepository)(nil).Update), ctx, reportUser)
}

// Create mocks base method
func (m *MockReportResultRepository) Create(ctx context.Context, reportUser *entity.ReportUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reportUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportResultRepositoryMockRecorder) Create(ctx, reportUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportResultRepository)(nil).Create), ctx, reportUser)
}

// CreateOrUpdateByCourseReportID mocks base method
func (m *MockReportResultRepository) CreateOrUpdateByCourseReportID(ctx context.Context, reportUser *entity.ReportUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateByCourseReportID", ctx, reportUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateByCourseReportID indicates an expected call of CreateOrUpdateByCourseReportID
func (mr *MockReportResultRepositoryMockRecorder) CreateOrUpdateByCourseReportID(ctx, reportUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateByCourseReportID", reflect.TypeOf((*MockReportResultRepository)(nil).CreateOrUpdateByCourseReportID), ctx, reportUser)
}
