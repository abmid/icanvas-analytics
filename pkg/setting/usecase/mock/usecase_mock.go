// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "github.com/abmid/icanvas-analytics/pkg/setting/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSettingUseCase is a mock of SettingUseCase interface
type MockSettingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSettingUseCaseMockRecorder
}

// MockSettingUseCaseMockRecorder is the mock recorder for MockSettingUseCase
type MockSettingUseCaseMockRecorder struct {
	mock *MockSettingUseCase
}

// NewMockSettingUseCase creates a new mock instance
func NewMockSettingUseCase(ctrl *gomock.Controller) *MockSettingUseCase {
	mock := &MockSettingUseCase{ctrl: ctrl}
	mock.recorder = &MockSettingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettingUseCase) EXPECT() *MockSettingUseCaseMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSettingUseCase) CreateOrUpdate(setting *entity.Setting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSettingUseCaseMockRecorder) CreateOrUpdate(setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSettingUseCase)(nil).CreateOrUpdate), setting)
}

// Create mocks base method
func (m *MockSettingUseCase) Create(setting *entity.Setting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSettingUseCaseMockRecorder) Create(setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSettingUseCase)(nil).Create), setting)
}

// CreateAll mocks base method
func (m *MockSettingUseCase) CreateAll(settings []*entity.Setting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAll", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAll indicates an expected call of CreateAll
func (mr *MockSettingUseCaseMockRecorder) CreateAll(settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAll", reflect.TypeOf((*MockSettingUseCase)(nil).CreateAll), settings)
}

// Update mocks base method
func (m *MockSettingUseCase) Update(id uint32, setting entity.Setting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSettingUseCaseMockRecorder) Update(id, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSettingUseCase)(nil).Update), id, setting)
}

// FindByFilter mocks base method
func (m *MockSettingUseCase) FindByFilter(filter entity.Setting) ([]entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", filter)
	ret0, _ := ret[0].([]entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter
func (mr *MockSettingUseCaseMockRecorder) FindByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockSettingUseCase)(nil).FindByFilter), filter)
}

// FindCanvasURL mocks base method
func (m *MockSettingUseCase) FindCanvasURL() (*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCanvasURL")
	ret0, _ := ret[0].(*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCanvasURL indicates an expected call of FindCanvasURL
func (mr *MockSettingUseCaseMockRecorder) FindCanvasURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCanvasURL", reflect.TypeOf((*MockSettingUseCase)(nil).FindCanvasURL))
}

// FindCanvasToken mocks base method
func (m *MockSettingUseCase) FindCanvasToken() (*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCanvasToken")
	ret0, _ := ret[0].(*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCanvasToken indicates an expected call of FindCanvasToken
func (mr *MockSettingUseCaseMockRecorder) FindCanvasToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCanvasToken", reflect.TypeOf((*MockSettingUseCase)(nil).FindCanvasToken))
}
